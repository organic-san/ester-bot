const { SlashCommandBuilder } = require('@discordjs/builders');
const Discord = require('discord.js');
const guild = require('../JSmodule/guildInformationClass');
const textCommand = require('../JSmodule/textModule');

module.exports = {
	data: new SlashCommandBuilder()
		.setName('levels')
        .setDescription('ËàáÁ≠âÁ¥öÁ≥ªÁµ±Áõ∏ÈóúÁöÑÊåá‰ª§')
        .addSubcommand(opt =>
            opt.setName('rank')
            .setDescription('Êü•ÁúãÁ≠âÁ¥ö')
            .addUserOption(opt => 
                opt.setName('user')
                .setDescription('Ë¶ÅÊü•ÁúãÁöÑÂ∞çË±°')
            )
        )
        .addSubcommand(opt =>
            opt.setName('ranking')
            .setDescription('Êü•ÁúãÁ≠âÁ¥öÊéíË°å')
        ).addSubcommand(opt => 
            opt.setName('no-dm')
            .setDescription('ÂÅúÁî®/ÂïüÁî®Ê©üÂô®‰∫∫ÁßÅË®äÂçáÁ≠âË®äÊÅØ')
        ).addSubcommand(opt =>
            opt.setName('open')
            .setDescription('ÈñãÂïüÁ≠âÁ¥öÁ≥ªÁµ±ÔºåÂÉÖÈôêÂÖ∑ÊúâÁÆ°ÁêÜ‰º∫ÊúçÂô®Ê¨äÈôê‰∫∫Âì°Êìç‰Ωú')
        ).addSubcommand(opt =>
            opt.setName('close')
            .setDescription('ÈóúÈñâÁ≠âÁ¥öÁ≥ªÁµ±ÔºåÂÉÖÈôêÂÖ∑ÊúâÁÆ°ÁêÜ‰º∫ÊúçÂô®Ê¨äÈôê‰∫∫Âì°Êìç‰Ωú')
        ).addSubcommand(opt =>
            opt.setName('reset')
            .setDescription('ÈáçÁΩÆÁ≠âÁ¥öÁ≥ªÁµ±ÔºåÂÉÖÈôêÂÖ∑ÊúâÁÆ°ÁêÜ‰º∫ÊúçÂô®Ê¨äÈôê‰∫∫Âì°Êìç‰Ωú')
        ).addSubcommand(opt =>
            opt.setName('level-up-react')
            .setDescription('ÈÅ∏ÊìáÂçáÁ¥öË®äÊÅØÁöÑÂõûÊáâÊñπÂºèÔºåÂÉÖÈôêÂÖ∑ÊúâÁÆ°ÁêÜ‰º∫ÊúçÂô®Ê¨äÈôê‰∫∫Âì°Êìç‰Ωú')
            .addStringOption(opt => 
                opt.setName('mode')
                .setDescription('ÂçáÁ¥öË®äÊÅØÁöÑÂõûÊáâÊñπÂºè')
                .addChoice("message-channel(ÁôºÈÄÅË®äÊÅØÁöÑÈ†ªÈÅì)", "MessageChannel")
                .addChoice("specify-channel(ÊåáÂÆöÈ†ªÈÅìÔºåÈúÄÂêåÊôÇÊåáÂÆöchannelËÆäÊï∏)", "SpecifyChannel")
                .addChoice("dm-channel(ÁßÅË®äÂõûÊáâ)", "DMChannel")
                .addChoice("no-react(‰∏çÂÅöÂõûÊáâ)", "NoReact")
                .setRequired(true)
            ).addChannelOption(opt =>
                opt.setName('channel')
                .setDescription('ÈÅ∏ÊìáÂçáÁ¥öË®äÊÅØË¶ÅÂõûÊáâÁöÑÈ†ªÈÅì(ÂÉÖÈúÄÂú®Ë®≠ÂÆöÁÇ∫specify-channelÊôÇËº∏ÂÖ•)')
            )
        ).addSubcommand(opt =>
            opt.setName('show')
            .setDescription('È°ØÁ§∫ÁõÆÂâçÁöÑË®≠ÂÆöÊ™îÔºåÂÉÖÈôêÂÖ∑ÊúâÁÆ°ÁêÜ‰º∫ÊúçÂô®Ê¨äÈôê‰∫∫Âì°Êìç‰Ωú')
        ),
    tag: "guildInfo",

    /**
     * 
     * @param {Discord.CommandInteraction} interaction 
     * @param {guild.GuildInformation} guildInformation 
     */
	async execute(interaction, guildInformation) {
        if(!(interaction.guild.members.cache.get((interaction.options.getUser('user') ?? interaction.user).id))) 
            return interaction.reply({content: "ÊàëÊ≤íËæ¶Ê≥ïÂú®ÈÄôÂÄã‰º∫ÊúçÂô®‰∏≠ÊâæÂà∞‰ªñ„ÄÇ", ephemeral:true});
        if (interaction.options.getSubcommand() === 'rank') {

            const user = interaction.options.getUser('user') ?? interaction.user;
            
            if(user.bot) return interaction.reply({content: "ÂìéÂëÄÔºÅÊ©üÂô®‰∫∫‰∏¶‰∏çÈÅ©Áî®Á≠âÁ¥öÁ≥ªÁµ±ÔºÅ", ephemeral: true});
            if(!guildInformation.levels) return interaction.reply({content: "ÂìéÂëÄÔºÅÈÄôÂÄã‰º∫ÊúçÂô®‰∏¶Ê≤íÊúâÈñãÂïüÁ≠âÁ¥öÁ≥ªÁµ±ÔºÅ"});

            else{
                var a = 0;
                let embed = new Discord.MessageEmbed().setColor(process.env.EMBEDCOLOR);
                let exps = 0;
                let lvls = 0;
                let levelsList = [];
                guildInformation.users.forEach((item) => {
                    levelsList.push(item.exp);
                    if(item.id === user.id){
                        a++;
                        let nextlevel = Math.ceil((textCommand.levelUpCalc(item.levels)) * textCommand.avgLevelPoint);
                        let backlevel = Math.min(Math.ceil((textCommand.levelUpCalc(item.levels - 1)) * textCommand.avgLevelPoint), item.exp);
                        if(item.levels === 0){backlevel = 0};
                        exps = item.exp;
                        lvls = item.levels;

                        let rankBar = "";
                        let firstMark = "üü®";
                        const secondMark = "üü™";
                        const Barlength = 20;
                        const persent = Math.ceil((exps - backlevel) / (nextlevel - backlevel) * Barlength - 0.5);
                        for(let i = 0; i < Barlength; i++){
                            if(i === persent){firstMark = secondMark;}
                            rankBar += firstMark;
                        }
                        embed.addField(`${exps - backlevel} / ${nextlevel - backlevel} exp. to next level`, rankBar, true)
                            .setFooter({text: `total: ${item.exp} exp. ${item.msgs} message(s). `/*${item.chips} chip(s)*/})
                            //TODO: Âú®Êú™‰æÜÊúâÈáëÈå¢Á≥ªÁµ±ÂæåË®òÂæóÊîπÊéâÈÄôË£°ÁöÑÈ°ØÁ§∫ÔºåËÆìchipsÈ°ØÁ§∫
                    }
                });
                if(a === 0){
                    interaction.reply({content: `Áúã‰æÜ ${user} ÈÇÑÊ≤íÁôºÈÄÅÂú®ÈÄô‰º∫ÊúçÂô®ÁöÑÁ¨¨‰∏ÄÂâáË®äÊÅØ„ÄÇ`, ephemeral: true});
                }else{
                    levelsList.sort(function(a, b) {return b - a;});
                    let rankshow = `\nüîπ RANK: #${levelsList.indexOf(exps) + 1} üîπ LEVEL: ${lvls} üîπ`;
                    if(interaction.guild.members.cache.get(user.id).nickname){
                        embed.setAuthor({
                            name: `${interaction.guild.members.cache.get(user.id).nickname} (${user.tag}) ${rankshow}`,
                            iconURL: user.displayAvatarURL({dynamic: true})
                        });
                    }else{
                        embed.setAuthor({
                            name: `${user.tag} ${rankshow}`,
                            iconURL: user.displayAvatarURL({dynamic: true})
                        });
                    }
                    interaction.reply({embeds: [embed]});
                }
            }

        } else if(interaction.options.getSubcommand() === 'ranking') {

            if(!guildInformation.levels) return interaction.reply({content: "ÂìéÂëÄÔºÅÈÄôÂÄã‰º∫ÊúçÂô®‰∏¶Ê≤íÊúâÈñãÂïüÁ≠âÁ¥öÁ≥ªÁµ±ÔºÅ"});
            const pageShowHax = 20;
            let page = 0;
            guildInformation.sortUser();
            const levels = levelsEmbed(interaction.guild, guildInformation, page, pageShowHax);
            const row = new Discord.MessageActionRow()
			.addComponents(
				[
                    new Discord.MessageButton()
                        .setCustomId('‰∏ä‰∏ÄÈ†Å')
                        .setLabel('‰∏ä‰∏ÄÈ†Å')
                        .setStyle('PRIMARY'),
                    new Discord.MessageButton()
                        .setCustomId('‰∏ã‰∏ÄÈ†Å')
                        .setLabel('‰∏ã‰∏ÄÈ†Å')
                        .setStyle('PRIMARY')
                ]
			);
            const msg = await interaction.reply({embeds: [levels], components: [row], fetchReply: true});

            const filter = i => ['‰∏ä‰∏ÄÈ†Å', '‰∏ã‰∏ÄÈ†Å'].includes(i.customId) && !i.user.bot;
            const collector = msg.createMessageComponentCollector({filter, time: 60 * 1000 });
            
            collector.on('collect', async i => {
                if (i.customId === '‰∏ã‰∏ÄÈ†Å') 
                    if(page * pageShowHax + pageShowHax < guildInformation.usersMuch) page++;
                if(i.customId === '‰∏ä‰∏ÄÈ†Å')
                    if(page > 0) page--;
                guildInformation.sortUser();
                const levels = levelsEmbed(interaction.guild, guildInformation, page, pageShowHax);
                i.update({embeds: [levels], components: [row]});
                collector.resetTimer({ time: 60 * 1000 });
            });
            
            collector.on('end', (c, r) => {
                if(r !== "messageDelete"){
                    const levels = levelsEmbed(interaction.guild, guildInformation, page, pageShowHax);
                    interaction.editReply({embeds: [levels], components: []})
                }
            });
            
        } else if(interaction.options.getSubcommand() === 'no-dm') {
            
            const item = guildInformation.getUser(interaction.user.id);
            if(item.DM !== true){
                item.DM = true;
                interaction.reply({content: `Â∑≤ÈñãÂïü‰Ω†Âú® **${interaction.guild.name}** ÁöÑÁßÅË®äÂçáÁ≠âÈÄöÁü•„ÄÇ`, ephemeral: true})
                    .catch(() => item.DM = false);
            }else{
                item.DM = false;
                interaction.reply({content: `Â∑≤ÈóúÈñâ‰Ω†Âú® **${interaction.guild.name}** ÁöÑÁßÅË®äÂçáÁ≠âÈÄöÁü•„ÄÇ`, ephemeral: true})
                    .catch(() => item.DM = false);
            }
        } else { 
            //Ê¨äÈôê
            if (!interaction.member.permissions.has(Discord.Permissions.FLAGS.MANAGE_GUILD)){ 
                return interaction.reply({content: "‰Ω†Ê≤íÊúâÁÆ°ÁêÜ‰º∫ÊúçÂô®ÁöÑÊ¨äÈôêÔºåÁÑ°Ê≥ï‰ΩøÁî®Êú¨ÂäüËÉΩ„ÄÇ", ephemeral: true});
            }
        }
        
        //‰ª•‰∏ãÈúÄË¶ÅÁÆ°ÁêÜÊ¨äÈôê

        //ÈñãÈóú
        if(interaction.options.getSubcommand() === 'open') {
            guildInformation.levels = true;
            interaction.reply("Â∑≤ÈñãÂïüÁ≠âÁ¥öÁ≥ªÁµ±");

        } else if(interaction.options.getSubcommand() === 'close') {
            guildInformation.levels = false;
            interaction.reply("Â∑≤ÈóúÈñâÁ≠âÁ¥öÁ≥ªÁµ±");

        //Ê≠∏Èõ∂
        } else if(interaction.options.getSubcommand() === 'reset') {
            const msg = await interaction.reply({content: "Á¢∫ÂÆöË¶ÅÊ∏ÖÈô§ÊâÄÊúâ‰∫∫ÁöÑÁ∂ìÈ©óÂÄºÂóéÔºüÊ≠§Âãï‰ΩúÁÑ°Ê≥ïÂæ©Âéü„ÄÇ\nÈªû‰∏Ä‰∏ã‰∏ãÈù¢ÁöÑ‚úÖ‰ª•Ê∏ÖÈô§ÊâÄÊúâË≥áÊñô", fetchReply: true});
            await msg.react('‚úÖ');
            const filter = (reaction, user) => reaction.emoji.name === '‚úÖ' && user.id === interaction.user.id;
            msg.awaitReactions({filter, max: 1, time: 20 * 1000, errors: ['time'] })
            .then((c) => {
                if(c.size !== 0){
                    guildInformation.clearReaction();
                    interaction.followUp("Â∑≤Ê≠∏Èõ∂ÊâÄÊúâ‰∫∫ÁöÑÁ∂ìÈ©óÂÄº„ÄÇ").catch((err)=>console.log(err));
                }else{
                    interaction.followUp("Â∑≤ÂèñÊ∂àÊ≠∏Èõ∂ÊâÄÊúâ‰∫∫ÁöÑÁ∂ìÈ©óÂÄº„ÄÇ");
                }
            }) 
            .catch(() => {
                msg.reactions.cache.get('‚úÖ').users.remove().catch((err)=>console.log(err));
                interaction.followUp("Â∑≤ÂèñÊ∂àÊ≠∏Èõ∂ÊâÄÊúâ‰∫∫ÁöÑÁ∂ìÈ©óÂÄº„ÄÇ");
            })

        //Êõ¥ÊîπÊ®°Âºè
        } else if(interaction.options.getSubcommand() === 'level-up-react') {

            const mode = interaction.options.getString('mode');

            if(['MessageChannel', 'DMChannel', 'NoReact'].includes(mode)){
                guildInformation.levelsReact = mode;
                return interaction.reply(`Ë®≠ÂÆöÂÆåÊàêÔºÅÂ∑≤Â∞áÂçáÁ≠âË®äÊÅØÁôºÈÄÅÊ®°ÂºèÊîπÁÇ∫ ${guildInformation.levelsReact}„ÄÇ`);

            }else{
                const channel = interaction.options.getChannel('channel');

                if(!channel) return interaction.reply({content: `Ë®≠ÂÆöÊ®°ÂºèÁÇ∫SpecifyChannelÊôÇË´ãË®≠ÂÆöÈ†ªÈÅì!`, ephemeral: true})
                if(!channel.isText()) return interaction.reply({content: '‚ö†Ô∏èÊâÄÈÅ∏ÊìáÈ†ªÈÅì‰ºº‰πé‰∏çÊòØÊñáÂ≠óÈ†ªÈÅì„ÄÇ', ephemeral: true});
                if(channel.isThread()) return interaction.reply({content: '‚ö†Ô∏èË´ã‰∏çË¶ÅÂ∞áÈ†ªÈÅìË®≠Á´ãÂú®Ë®éË´ñ‰∏≤„ÄÇ', ephemeral: true});
                guildInformation.levelsReactChannel = channel.id;
                guildInformation.levelsReact = mode;
                interaction.reply(`Ë®≠ÂÆöÂÆåÊàêÔºÅ\nÂ∑≤Â∞áÂçáÁ≠âË®äÊÅØÁôºÈÄÅÊ®°ÂºèÊîπÁÇ∫ ${guildInformation.levelsReact}\n` +
                ` È†ªÈÅìÊåáÂÆöÁÇ∫ ${channel} (ID: ${channel.id})`);
            }

        //È°ØÁ§∫Ë®≠ÂÆö
        } else if(interaction.options.getSubcommand() === 'show') {
            let levelsisworking = guildInformation.levels ? "ÂïüÁî®" : "ÂÅúÁî®";

            let embed = new Discord.MessageEmbed()
                .setTitle(`${interaction.guild.name} ÁöÑÁ≠âÁ¥öÊéíË°åË®≠ÂÆö`)
                .setColor(process.env.EMBEDCOLOR)                            
                .setThumbnail(`https://cdn.discordapp.com/icons/${interaction.guild.id}/${interaction.guild.icon}.jpg`)
                .addField("Á≠âÁ¥öÊéíË°åÁ≥ªÁµ±", levelsisworking, true)
                .addField("ÂçáÁ¥öË®äÊÅØÁôºÈÄÅÊ®°Âºè", guildInformation.levelsReact, true)
                .setFooter({
                    text: `${interaction.client.user.tag} ‚Ä¢ Áõ∏ÈóúË™™ÊòéË´ãÊü•Áúã/help`,
                    iconURL: `${interaction.client.user.displayAvatarURL({dynamic: true})}`
                })
                .setTimestamp();
            
            if(guildInformation.levelsReact === "SpecifyChannel") {
                const channel = interaction.client.channels.cache.get(guildInformation.levelsReactChannel);
                let lcm = `${channel ?? "undefined"}`;
                embed.addField("ÂçáÁ¥öË®äÊÅØÁôºÈÄÅÈ†ªÈÅì", lcm, true);
            }
            interaction.reply({embeds: [embed]});
        }
	},
};

/**
 * È°ØÁ§∫Êï¥ÂÄã‰º∫ÊúçÂô®ÁöÑÁ∂ìÈ©óÂÄºÊéíÂêç
 * @param {Discord.Guild} guild Ë©≤‰º∫ÊúçÂô®ÁöÑDiscordË≥áÊñô
 * @param {guild.GuildInformation} element Ë©≤‰º∫ÊúçÂô®ÁöÑË≥áË®ä
 * @param {number} page È†ÅÊï∏
 * @param {number} pageShowHax ÂñÆÈ†Å‰∏äÈôê 
 * @returns ÂåÖÂê´ÊéíÂêçÁöÑDiscord.MessageEmbed
 */
function levelsEmbed(guild, element, page, pageShowHax){
    //#region Á≠âÁ¥öÊéíË°åÈ°ØÁ§∫Ê∏ÖÂñÆ
    let levelembed = new Discord.MessageEmbed()
        .setTitle(`${guild.name} ÁöÑÁ≠âÁ¥öÊéíË°å`)
        .setColor(process.env.EMBEDCOLOR)                            
        .setThumbnail(`https://cdn.discordapp.com/icons/${guild.id}/${guild.icon}.jpg`);

    let ebmsgrk = "";
    let ebmsgname = "";
    let ebmsgexp = "";
    for(let i = page * pageShowHax; i < Math.min(page * pageShowHax + pageShowHax, element.users.length); i++){
        let nametag = new String(element.users[i].tag);
        if(nametag.length > 20){nametag = nametag.substring(0,20) + `...`;}
        ebmsgrk += `#${i + 1} \n`;
        ebmsgname += `${nametag}\n`
        ebmsgexp += `${element.users[i].exp} exp. (lv.${element.users[i].levels})\n`;
    }
    levelembed.setDescription(`#${page * pageShowHax + 1} ~ #${Math.min(page * pageShowHax + pageShowHax, element.users.length)}` + 
        ` / #${element.users.length}`);
    levelembed.addField("rank", ebmsgrk, true);
    levelembed.addField("name", ebmsgname, true);
    levelembed.addField("exp.", ebmsgexp, true);

    return levelembed;
}